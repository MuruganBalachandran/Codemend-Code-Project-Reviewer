const User = require('../models/User');
const { validationResult } = require('express-validator');
const { checkConnection } = require('../config/db'); // Import checkConnection
const { comparePassword } = require('../auth/utils'); // or similar utility

// @desc    Register a user
// @route   POST /api/auth/register
// @access  Public
exports.register = async (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  try {
    const { fullName, username, email, password } = req.body;
    
    // Log user inputs for debugging
    console.log('New user registration:');
    console.log('- Name:', fullName);
    console.log('- Username:', username);
    console.log('- Email:', email);
    console.log('- Password length:', password.length);

    // Check database connection first
    if (!checkConnection()) {
      console.error('Registration failed: Database connection error');
      return res.status(503).json({
        success: false,
        error: 'Database connection error. Please try again later.',
        isDbError: true
      });
    }

    // Check if user already exists
    let user = await User.findOne({ email });
    if (user) {
      console.log('Registration failed: Email already exists');
      return res.status(400).json({ 
        success: false, 
        error: 'User already exists with that email' 
      });
    }
    // Check if username is taken
    user = await User.findOne({ username });
    if (user) {
      console.log('Registration failed: Username already taken');
      return res.status(400).json({ 
        success: false, 
        error: 'Username is already taken' 
      });
    }

    // Create user - userId will be auto-generated by the pre-save middleware
    user = await User.create({
      name: fullName,
      username,
      email,
      password
      // No need to provide userId, it's auto-generated
    });

    console.log('User created successfully:');
    console.log('- ID:', user._id);
    console.log('- UserId:', user.userId); // This should be auto-generated now
    console.log('- Created at:', user.createdAt);

    // Return success message - no token on registration
    res.status(201).json({
      success: true,
      message: 'Account created successfully. Please login.',
      data: {
        userId: user.userId,
        name: user.name,
        username: user.username,
        email: user.email
      }
    });
  } catch (err) {
    console.error('Registration error:', err.message);
    // Check if it's a MongoDB connection error
    if (err.name === 'MongooseServerSelectionError' || 
        err.message.includes('connect')) {
      return res.status(503).json({
        success: false,
        error: 'Database connection error. Please try again later.',
        isDbError: true
      });
    }
    next(err);
  }
};

// @desc    Login user
// @route   POST /api/auth/login
// @access  Public
exports.login = async (req, res, next) => {
  try {
    const { email, password } = req.body;
    
    // Log login attempt
    console.log('Login attempt:', email);

    // Validate email & password
    if (!email || !password) {
      console.log('Login failed: Missing email or password');
      return res.status(400).json({ 
        success: false, 
        error: 'Please provide an email and password' 
      });
    }

    // Check for user
    const user = await User.findOne({ email }).select('+password');
    if (!user) {
      console.log('Login failed: User not found');
      return res.status(401).json({ 
        success: false, 
        error: 'Invalid credentials' 
      });
    }

    // Check if password matches
    const isMatch = await user.matchPassword(password);
    if (!isMatch) {
      console.log('Login failed: Invalid password');
      return res.status(401).json({ 
        success: false, 
        error: 'Invalid credentials' 
      });
    }

    console.log('Login successful:', user.name);
    
    // Create token
    sendTokenResponse(user, 200, res);
  } catch (err) {
    console.error('Login error:', err.message);
    next(err);
  }
};

// Helper function to handle token response
const sendTokenResponse = (user, statusCode, res) => {
  // Create token
  const token = user.getSignedJwtToken();

  // Remove password from output
  user.password = undefined;

  res.status(statusCode).json({
    success: true,
    token,
    data: {
      id: user._id,
      userId: user.userId,
      name: user.name,
      username: user.username,
      email: user.email
    }
  });
};

// @desc    Logout user
// @route   POST /api/auth/logout
// @access  Public
exports.logout = async (req, res, next) => {
  console.log('User logged out');
  res.status(200).json({
    success: true,
    message: 'Successfully logged out'
  });
};

// @desc    Get current logged in user
// @route   GET /api/auth/me
// @access  Private
exports.getMe = async (req, res, next) => {
  try {
    const user = await User.findById(req.user.id);
    console.log('User info requested:', user.name);
    
    res.status(200).json({
      success: true,
      data: user
    });
  } catch (err) {
    console.error('Get user info error:', err.message);
    next(err);
  }
};
